import React, { useState } from "react";
import Grid from "@mui/material/Grid";
import {
  Button,
  Container,
  FormControl,
  FormControlLabel,
  FormGroup,
  Input,
  InputLabel,
  MenuItem,
  Select,
  Switch,
  TextareaAutosize,
} from "@mui/material";
import { styled, useTheme } from "@mui/material/styles";
import Box from "@mui/material/Box";
import MuiDrawer from "@mui/material/Drawer";
import MuiAppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import List from "@mui/material/List";
import CssBaseline from "@mui/material/CssBaseline";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import InboxIcon from "@mui/icons-material/MoveToInbox";
import MailIcon from "@mui/icons-material/Mail";
import AddTwoToneIcon from "@mui/icons-material/AddTwoTone";
import ViewInArTwoToneIcon from "@mui/icons-material/ViewInArTwoTone";
import Menu from "@mui/material/Menu";
import AccountCircle from "@mui/icons-material/AccountCircle";
import "./chattingWindow.css";
import PostAddSharpIcon from "@mui/icons-material/PostAddSharp";
import MicIcon from "@mui/icons-material/Mic";
import ManageHistorySharpIcon from '@mui/icons-material/ManageHistorySharp';
import LogoutOutlinedIcon from '@mui/icons-material/LogoutOutlined';
import SendIcon from '@mui/icons-material/Send';


export const ChattingWindow = () => {
  return (
    <div>
      <Grid container spacing={2} sx={{ mt: 8 }}>
        <Grid item xs={9}>
          <MiniDrawer />
           
        </Grid>
        {/* <Grid
          item
          xs
          sx={{
            backgroundColor: "#f5fcff",
            boxShadow: "1px 2px 8px",
            transition: "ease-in-out 500ms",
          }}
        > */}
          {/* <Container sx={{ minHeight: "600px" }}> */}
            {/* <div className="outerBlock">
              <div className="block">
                <input type="text" className="input-res" />
                <AttachmentTwoToneIcon>
                  <input type="file"/>
                  </AttachmentTwoToneIcon>
              </div>
            </div> */}
            {/* <div className="block align-center">
              <input type="text" value="Enter your query...." className="input-res" />
              <MicIcon sx={{mr:2}}/>
              <PostAddSharpIcon sx={{mr:2}} />
              <SendIcon/>
            </div> */}
            
          {/* </Container> */}
        {/* </Grid> */}
        <Grid item xs>
          Right Page
          <HistoryList />
        </Grid>
      </Grid>
    </div>
  );
};

//History
const History = [{ id: 0, topic: 'What is Java?' }, { id: 1, topic: 'What is Python?' }, { id: 2, topic: 'What is C programming?' }, { id: 3, topic: 'What is Ruby?' },{ id: 4, topic: 'What is JSX?' }];
function HistoryList() {
  return (
    <List
      sx={{
        width: "100%",
        maxWidth: 360,
        bgcolor: "background.paper",
        position: "relative",
        overflow: "auto",
        maxHeight: 300,
      }}
    >
      {History.map((item) => (
        <ListItem key={item.id}>
          <ListItemText primary={item.topic} />
        </ListItem>
      ))}
    </List>
  );
}

const drawerWidth = 300;

const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: "hidden",
});

const closedMixin = (theme) => ({
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: "hidden",
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up("sm")]: {
    width: `calc(${theme.spacing(8)} + 1px)`,
  },
});

const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
}));
const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open }) => ({
    flexGrow: 1,
    padding: theme.spacing(3),
    transition: theme.transitions.create('margin', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: `-${drawerWidth}px`,
    ...(open && {
      transition: theme.transitions.create('margin', {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.enteringScreen,
      }),
      marginLeft: 0,
    }),
  }),
);

const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(["width", "margin"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

const Drawer = styled(MuiDrawer, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  width: drawerWidth,
  flexShrink: 0,
  whiteSpace: "nowrap",
  boxSizing: "border-box",
  ...(open && {
    ...openedMixin(theme),
    "& .MuiDrawer-paper": openedMixin(theme),
  }),
  ...(!open && {
    ...closedMixin(theme),
    "& .MuiDrawer-paper": closedMixin(theme),
  }),
}));

function MiniDrawer() {
  const theme = useTheme();
  const [open, setOpen] = useState(false);
  const [auth, setAuth] = useState(true);
  const [anchorEl, setAnchorEl] = useState(null);
  const [LLM, setLLM] = useState({ id: 0, label: "" });
  const LLMoptions = [
    { id: 1, label: "LLM 1" },
    { id: 2, label: "LLM 2" },
    { id: 3, label: "LLM 3" },
  ];

  //Account change

  const handleChange = (event) => {
    setAuth(event.target.checked);
  };

  const handleMenu = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  //llm selection change
  const LLMhandleChange = (event) => {
    setLLM(event.target.value);
    console.log(LLM);
  };

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      <CssBaseline />

      <AppBar
        position="fixed"
        open={open}
        variant="secondary"
        sx={{ opacity: open ? 0 : 0.8, transition: "ease-in-out 500ms" }}>
      
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleDrawerOpen}
            edge="start"
            sx={{
              marginRight: 5,
              ...(open && { display: "none" }),
            }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" sx={{ flexGrow: 1 }} component="div">
            Mini variant drawer
          </Typography>
          {/* Account corner */}
          {auth && (
            <div>
              <IconButton
                size="large"
                aria-label="account of current user"
                aria-controls="menu-appbar"
                aria-haspopup="true"
                onClick={handleMenu}
                color="inherit"
              >
                <AccountCircle />
              </IconButton>
              <Menu
                id="menu-appbar"
                anchorEl={anchorEl}
                anchorOrigin={{
                  vertical: "top",
                  horizontal: "right",
                }}
                keepMounted
                transformOrigin={{
                  vertical: "top",
                  horizontal: "right",
                }}
                open={Boolean(anchorEl)}
                onClose={handleClose}
              >
                <MenuItem onClick={handleClose}>Profile</MenuItem>
                <MenuItem onClick={handleClose}>My account</MenuItem>
              </Menu>
            </div>
          )}
        </Toolbar>
        
      </AppBar>
      {/* When drawer open */}
      <Drawer variant="permanent" open={open}>
        <DrawerHeader>
          <Typography
            variant="h4"
            sx={{ fontWeight: "bold", mr: 3, textAlign: "center" }}
          >
            IntelliBuild{" "}
          </Typography>
          <IconButton onClick={handleDrawerClose}>
            {theme.direction === "rtl" ? (
              <ChevronRightIcon />
            ) : (
              <ChevronLeftIcon />
            )}
          </IconButton>
        </DrawerHeader>

        <Divider />

        {/* List down the left menu */}
        <List onClick={handleDrawerOpen}>
          <ListItem disablePadding sx={{ display: "block" }}>
            <ListItemButton
              sx={{
                minHeight: 48,
                justifyContent: open ? "initial" : "center",
                px: 2.5,
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: open ? 3 : "auto",
                  justifyContent: "center",
                }}
              >
                <AddTwoToneIcon sx={{ opacity: open ? 0 : 1 }} />
              </ListItemIcon>
              <ListItemText sx={{ opacity: open ? 1 : 0 }}>
                <Button>
                  <AddTwoToneIcon fontSize="medium" />
                  New Chat
                </Button>
              </ListItemText>
            </ListItemButton>
          </ListItem>
          {/* History show */}
          <ListItem disablePadding sx={{ display: "block" }}>
            <ListItemButton
              sx={{
                maxHeight: 250,
                justifyContent: open ? "initial" : "center",
                px: 2.5,
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: open ? 3 : "auto",
                  justifyContent: "center",
                }}
              >
                <ManageHistorySharpIcon sx={{ opacity: open ? 0 : 1 }} />
              </ListItemIcon>
              <ListItemText sx={{ opacity: open ? 1 : 0 }}>
                <HistoryList/>
              </ListItemText>
            </ListItemButton>
          </ListItem>
        </List>

        <Divider />
        <List sx={{ position: "absolute", bottom: 0, width: "100%" }}>
          <ListItem disablePadding sx={{ display: "block" }}>
            <ListItemButton
              sx={{
                height: 48,
                justifyContent: open ? "initial" : "center",
                px: 2.5,
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: open ? 3 : "auto",
                  justifyContent: "center",
                }}
              >
                <ViewInArTwoToneIcon onClick={handleDrawerOpen} />
              </ListItemIcon>
              {/* <ListItemText  s> */}

              {/* LLM dropbox */}
              <FormControl fullWidth sx={{ opacity: open ? 1 : 0 }}>
                <InputLabel id="demo-simple-select-label">LLM</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={LLM}
                  label="LLM"
                  onChange={LLMhandleChange}
                >
                  {LLMoptions.map((list) => (
                    <MenuItem key={list.id} value={list.id}>
                      {list.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              {/* </ListItemText> */}
            </ListItemButton>
          </ListItem>
          <ListItem disablePadding sx={{ display: "block" }}>
            <ListItemButton
              sx={{
                height: 48,
                justifyContent: open ? "initial" : "center",
                px: 2.5,
              }}
            >
              <ListItemIcon
                sx={{
                  minWidth: 0,
                  mr: open ? 3 : "auto",
                  justifyContent: "center",
                }}
              >
                <LogoutOutlinedIcon onClick={handleDrawerOpen} />
              </ListItemIcon>
              <Button variant="outlined" color='error' sx={{ opacity: open ? 1 : 0 }} onClick={handleChange}>Logout</Button>
            </ListItemButton>
          </ListItem>
        </List>
      </Drawer>
      <Box >
      <Main open={open} >
        <DrawerHeader />
        <Typography paragraph>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
          tempor incididunt ut labore et dolore magna aliqua. Rhoncus dolor purus non
          enim praesent elementum facilisis leo vel. Risus at ultrices mi tempus
          imperdiet. Semper risus in hendrerit gravida rutrum quisque non tellus.
          Convallis convallis tellus id interdum velit laoreet id donec ultrices.
          Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit
          adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra
          nibh cras. Metus vulputate eu scelerisque felis imperdiet proin fermentum
          leo. Mauris commodo quis imperdiet massa tincidunt. Cras tincidunt lobortis
          feugiat vivamus at augue. At augue eget arcu dictum varius duis at
          consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem donec massa
          sapien faucibus et molestie ac.
        </Typography>
        <Typography paragraph>
          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper
          eget nulla facilisi etiam dignissim diam. Pulvinar elementum integer enim
          neque volutpat ac tincidunt. Ornare suspendisse sed nisi lacus sed viverra
          tellus. Purus sit amet volutpat consequat mauris. Elementum eu facilisis
          sed odio morbi. Euismod lacinia at quis risus sed vulputate odio. Morbi
          tincidunt ornare massa eget egestas purus viverra accumsan in. In hendrerit
          gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem
          et tortor. Habitant morbi tristique senectus et. Adipiscing elit duis
          tristique sollicitudin nibh sit. Ornare aenean euismod elementum nisi quis
          eleifend. Commodo viverra maecenas accumsan lacus vel facilisis. Nulla
          posuere sollicitudin aliquam ultrices sagittis orci a.
        </Typography>
        </Main>
      </Box>
    </Box>
  );
}









@import url('https://fonts.googleapis.com/css?family=Open+Sans');


/* 
.outerBlock{
    max-width: 800px;
    background-color: antiquewhite;
    
    
} */
.block:hover{
    background-color: #f8f7f7;
    box-shadow: 1px 1px 1px;

}
.block
{
  /* margin: 0 5 auto 0 ;
  max-width: 600px;
  min-width: 600px;
  box-sizing:'border-box';
  padding: 10px 10px; 
  position:absolute;
  bottom: 5px;
  right:25% ;
  align-items: flex-end;

  background-color: #f7f6f6;
  border: none;
  padding: 10px 11px 11px 11px;
  border-radius: 20px;
  box-shadow: none;
  margin: 0; */
 align-items: flex-end;
 box-sizing: content-box;
 display: flex;
 flex-wrap: wrap;

  
}
.input-res
{
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font: 15px/1 'Open Sans', sans-serif;
  color: #333;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  width: 80%;
    padding-left: 2%;
  background-color: #f7f6f6;
  border: none;
  /* padding: 10px 11px 11px 11px; */
  /* border-radius: 20px; */
  box-shadow: none;
  outline: none;
  margin: 0;
  box-sizing: border-box; 
  /* position:absolute;
  bottom:0; */
}
